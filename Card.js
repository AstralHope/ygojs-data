// Generated by CoffeeScript 2.0.0-alpha1
(function() {
  'use strict';
  var Card, Cards, fs, sqlite;

  sqlite = require('sqlite3').verbose();

  fs = require('fs');

  Card = class Card {
    constructor(data) {
      this.readData(data);
    }

    readData(data) {
      this.id = data.id;
      this.ot = data.ot;
      this.alias = data.alias;
      this.setcode = data.setcode;
      this.type = data.type;
      this.category = data.category;
      this.name = data.name;
      this.desc = data.desc;
      if (this.isTypeMonster) {
        this.originLevel = data.level;
        this.race = data.race;
        this.attribute = data.attribute;
        this.atk = data.atk;
        return this.def = data.def;
      }
    }

  };

  Object.defineProperty(Card.prototype, 'isAlias', {
    get: function() {
      return this.alias > 0;
    }
  });

  Object.defineProperty(Card.prototype, 'isOcg', {
    get: function() {
      return this.ot & 1 > 0;
    }
  });

  Object.defineProperty(Card.prototype, 'isTcg', {
    get: function() {
      return this.ot & 2 > 0;
    }
  });

  Object.defineProperty(Card.prototype, 'level', {
    get: function() {
      return this.originLevel % 65536;
    }
  });

  Object.defineProperty(Card.prototype, 'pendulumScale', {
    get: function() {
      if (this.isTypePendulum) {
        return (this.originLevel - (this.originLevel % 65536)) / 65536 / 257;
      } else {
        return -1;
      }
    }
  });

  Cards = (function() {
    class Cards {
      constructor(locale, constants) {
        var db, strings;
        this.cards = {};
        db = Cards.localePath + locale + "/cards.cdb";
        strings = Cards.localePath + locale + "/strings.conf";
        if (!constants) {
          constants = Cards.defaultConstants;
        }
        this.db = new sqlite.Database(db);
        this.attributeNames = [];
        this.raceNames = [];
        this.typeNames = [];
        this.attributeConstants = [];
        this.raceConstants = [];
        this.typeConstants = [];
        this.attributes = [];
        this.races = [];
        this.types = [];
        this.loadStringsFile(strings);
        this.loadConstantsFile(constants);
        this.linkStringAndConstants();
        this.registerMethods();
        Cards[locale] = this;
      }

      getCardByID(id, callback) {
        if (this.cards[id]) {
          callback(this.cards[id]);
        }
        return this.generateCardByID(id, callback);
      }

      generateCardByID(id, callback) {
        var stmt;
        stmt = this.db.prepare(Cards.readDataSQL);
        stmt.run(id);
        return stmt.all(this.onSqlRead.bind({
          callback: callback,
          stmt: stmt,
          cards: this.cards
        }));
      }

      onSqlRead(err, rows) {
        var card;
        if (err) {
          console.log(`sql query failed: ${err}`);
          this.callback(null);
        } else if (rows.length === 0) {
          console.log(`no card [${id}]`);
          this.callback(null);
        } else {
          card = new Card(rows[0]);
          this.cards[card.id] = card;
          this.callback(card);
        }
        return this.stmt.finalize();
      }

      loadStringsFile(filePath) {
        return this.loadStrings(fs.readFileSync(filePath).toString());
      }

      loadStrings(stringFile) {
        var j, len, line, lines, ref, results, systemNumber, text;
        lines = stringFile.split("\n");
        results = [];
        for (j = 0, len = lines.length; j < len; j++) {
          line = lines[j];
          if (!line.startsWith('!system 10')) {
            continue;
          }
          ref = this.loadStringLines(line), systemNumber = ref[0], text = ref[1];
          if (this.isAttributeName(systemNumber)) {
            this.attributeNames.push(text);
          }
          if (this.isRaceName(systemNumber)) {
            this.raceNames.push(text);
          }
          if (this.isTypeName(systemNumber)) {
            results.push(this.typeNames.push(text));
          } else {
            results.push(void 0);
          }
        }
        return results;
      }

      loadStringLines(line) {
        var answer, reg;
        reg = /!system (\d+) (.+)/;
        answer = line.match(reg);
        if (answer === null) {
          return [0, ''];
        }
        return [parseInt(answer[1]), answer[2]];
      }

      isAttributeName(systemNumber) {
        return systemNumber >= 1010 && systemNumber < 1020;
      }

      isRaceName(systemNumber) {
        return systemNumber >= 1020 && systemNumber < 1050;
      }

      isTypeName(systemNumber) {
        return systemNumber >= 1050 && systemNumber < 1080 && systemNumber !== 1053 && systemNumber !== 1065;
      }

      loadConstantsFile(filePath) {
        return this.loadConstants(fs.readFileSync(filePath).toString());
      }

      loadConstants(stringFile) {
        var j, len, line, lines, name, ref, results, value;
        lines = stringFile.split("\n");
        results = [];
        for (j = 0, len = lines.length; j < len; j++) {
          line = lines[j];
          ref = this.loadLuaLines(line), name = ref[0], value = ref[1];
          this.checkAndAddConstant(name, value, 'ATTRIBUTE_', this.attributeConstants);
          this.checkAndAddConstant(name, value, 'RACE_', this.raceConstants);
          this.checkAndAddConstant(name, value, 'TYPE_', this.typeConstants);
          results.push(this.raceConstants = this.raceConstants.slice(1));
        }
        return results;
      }

      loadLuaLines(line) {
        var answer;
        answer = line.match(/([A-Z_]+)\s*=\s*0x(\d+)/);
        if (answer === null) {
          return ['', 0];
        }
        return [answer[1], parseInt(answer[2], 16)];
      }

      checkAndAddConstant(name, value, prefix, target) {
        if (!name.startsWith(prefix)) {
          return;
        }
        return target.push({
          name: name.substring(prefix.length).toLowerCase(),
          value: value
        });
      }

      linkStringAndConstants() {
        this.linkStringAndConstant(this.attributeNames, this.attributeConstants, this.attributes);
        this.linkStringAndConstant(this.raceNames, this.raceConstants, this.races);
        return this.linkStringAndConstant(this.typeNames, this.typeConstants, this.types);
      }

      linkStringAndConstant(strings, constants, target) {
        var constant, i, j, ref, results;
        target.length = 0;
        results = [];
        for (i = j = 0, ref = strings.length - 1; 0 <= ref ? j <= ref : j >= ref; i = 0 <= ref ? ++j : --j) {
          constant = constants[i];
          if (!constant) {
            continue;
          }
          results.push(target.push({
            name: constant.name,
            value: constant.value,
            text: strings[i]
          }));
        }
        return results;
      }

      registerMethods() {
        this.registerTypedMethods("attribute", this.attributes);
        this.registerTypedMethods("race", this.races);
        return this.registerTypedMethods("type", this.types);
      }

      registerTypedMethods(prefix, items) {
        
        for (let i = 0; i < items.length; i++) {
            let item = items[i];
            let name = "is" + prefix.toCamelCase() + item.name.toCamelCase();
            Card.prototype[name + "?"] = function () {
                return (this[prefix] & item.value) > 0
            }
            Object.defineProperty(Card.prototype, name, { get: Card.prototype[name + "?" ] });
        }
    ;
        return 0;
      }

      raceName(card) {
        var j, len, race, ref;
        ref = this.races;
        for (j = 0, len = ref.length; j < len; j++) {
          race = ref[j];
          if ((card.race & race.value) > 0) {
            return race.text;
          }
        }
        return '';
      }

      attributeName(card) {
        var attribute, j, len, ref;
        ref = this.attributes;
        for (j = 0, len = ref.length; j < len; j++) {
          attribute = ref[j];
          if ((card.attribute & attribute.value) > 0) {
            return attribute.text;
          }
        }
        return '';
      }

    };

    Cards.readDataSQL = "select * from datas join texts on datas.id == texts.id where datas.id = (?)";

    Cards.searchNameSQL = "select id from texts where name like (?)";

    Cards.localePath = "./ygopro-database/locales/";

    Cards.defaultConstants = "./constant.lua";

    return Cards;

  })();

  String.prototype.toCamelCase = function() {
    return this[0].toUpperCase() + this.substring(1).toLowerCase();
  };

  new Cards('zh-CN');

  new Cards('en-US');

  new Cards('ja-JP');

}).call(this);
