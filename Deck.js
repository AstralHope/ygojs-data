// Generated by CoffeeScript 2.0.0-alpha1
(function() {
  'use strict';
  var Deck, fs;

  fs = require('fs');

  Deck = class Deck {
    constructor() {
      this.main = [];
      this.side = [];
      this.ex = [];
      this.classifiedMain = {};
      this.classifiedSide = {};
      this.classifiedEx = {};
      this.form = 'id';
    }

    classify() {
      this.classifyPack(this.main, this.classifiedMain);
      this.classifyPack(this.side, this.classifiedSide);
      this.classifyPack(this.ex, this.classifiedEx);
      return this;
    }

    classifyPack(from, to) {
      var i, j, len, len1, obj, results;
      for (i = 0, len = from.length; i < len; i++) {
        obj = from[i];
        to[obj] = 0;
      }
      results = [];
      for (j = 0, len1 = from.length; j < len1; j++) {
        obj = from[j];
        results.push(to[obj] += 1);
      }
      return results;
    }

    separateExFromMain() {
      var card, i, len, newMain, ref;
      if (this.form !== 'card') {
        this.transformToCards;
      }
      newMain = [];
      ref = this.main;
      for (i = 0, len = ref.length; i < len; i++) {
        card = ref[i];
        if (!card) {
          continue;
        }
        if (card.isEx) {
          this.ex.push(card);
        } else {
          newMain.push(card);
        }
      }
      this.main = newMain;
      return this;
    }

    transformToCards(environment) {
      if (this.form === 'card') {
        return;
      }
      this.main = this.transformPackToCards(environment, this.main);
      this.side = this.transformPackToCards(environment, this.side);
      this.ex = this.transformPackToCards(environment, this.ex);
      this.form = 'card';
      return this;
    }

    transformPackToCards(environment, pack) {
      var answer, i, id, len;
      answer = [];
      for (i = 0, len = pack.length; i < len; i++) {
        id = pack[i];
        answer.push(environment[id]);
      }
      return answer;
    }

    transformToId() {
      if (this.form === 'id') {
        return;
      }
      this.main = this.transformPackToIds(environment, this.main);
      this.side = this.transformPackToIds(environment, this.side);
      this.ex = this.transformPackToIds(environment, this.ex);
      this.form = 'id';
      return this;
    }

    transformPackToIds(pack) {
      var answer, card, i, len;
      answer = [];
      for (i = 0, len = pack.length; i < len; i++) {
        card = pack[i];
        answer.push(card.id);
      }
      return answer;
    }

    static fromString(str) {
      var deck, focus, i, id, len, line, lines;
      deck = new Deck();
      focus = deck.main;
      lines = str.split("\n");
      for (i = 0, len = lines.length; i < len; i++) {
        line = lines[i];
        line = line.trim();
        if (line.endsWith('main')) {
          focus = deck.main;
        } else if (line.endsWith('side')) {
          focus = deck.side;
        } else if (line.endsWith('ex') || line.endsWith('extra')) {
          focus = deck.ex;
        } else {
          if (line.startsWith('#')) {
            continue;
          }
          id = parseInt(line);
          if (id && id > 0) {
            focus.push(id);
          }
        }
      }
      return deck;
    }

    static fromFile(filePath, callback) {
      return fs.readFile(filePath, function(buffer) {
        return callback(this.fromString(buffer.toStirng()));
      });
    }

    static fromFileSync(filePath) {
      return this.fromString(fs.readFileSync(filePath).toString());
    }

  };

  module.exports = Deck;

}).call(this);

//# sourceMappingURL=Deck.js.map
